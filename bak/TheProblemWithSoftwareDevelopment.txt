Software development has an expertise problem. But maybe not the first one you think of when you hear that. 

If you don't work in software development, you might not think this concerns you. But if you use software - and you're reading this, you do - it certainly does. Software affects our lives more directly every day, so the people who make that software are all of our concern.

Expertise and expert are funny terms. Do experts ever make mistakes? When I taught brand new developers at General Assembly's bootcamp, I was definitely an expert in all things development. When I made a mistake during class, I would own up to it for transparency's sake, but it's possible the class would not have caught it otherwise. 

In 2017, I was teaching JavaScript, Angular and React at Fortune 500 companies for a consultancy called DevelopIntelligence. An average student typically had 10-15 years' experience in Java or C++, but only one or two in JavaScript. So while I had more knowledge of the subject matter, regarding software development in general, we were equals.

At least, that's how I felt when I went to Palo Alto to teach at a high-tech company that's a household name in the development world, and might even be recognizable to non-devs. This company makes virtualization software, which allows one operating system to run on another. This is hardcore, "Matrix" level software development. But JavaScript frameworks and single-page web apps are a brave new world, so I felt confident I had value to share. 

Like every class I teach, I started by introducing myself and giving a brief overview of the subject. Then I went around the room and learned everyone's name and a little about them. Most students had the typical background, but a few students were specialists in virtualization, including one who said his job was hypervisor R&D. Like I said, hardcore stuff.  
We got started by diving into a "Hello, World" program. In a Hello World, you simply try to print out a message, to make sure your environment is up and running. I asked the class if everyone had success, and the whole class nodded - except surprisingly, the hypervisor researcher put his hand up. 

I walked to the back of the class. After ten years of working with junior developers, I can often spot a problem from the shape of the code before I even get close enough to read the letters, and this was one of those cases. But before I could say anything, this senior researcher went on the offensive. 

The first words out of his mouth were, "Your code doesn't work." 

I tried to keep my facial expression neutral, though I can't guarantee I didn't raise an eyebrow. I pointed out that he had modified my example, and the modification was causing the error. 

He said, "I don't think so."

Oh really? 
